public class Player
{
	private String aPseudo;//commentaire1
	private Room aCurrentRoom; // commentaire 2
	private HashMap<String, Item> aItems;
	private Stack<Room> aPreviousRooms;
	private int aCurrentWeight;

	//commentaire3
	/**
 	* Permet l'initialisation d'une nouvelle partie pour un joueur.
 	*
 	* @param pPseudo : de type de String, correspond au pseudo du joueur que l'on veut créer.
 	*/
	public Player(final String pPseudo) {
    	this.aPseudo = pPseudo;
    	this.aCurrentWeight = 0;
    	this.aItems = new HashMap<String, Item>();
    	this.aPreviousRooms = new Stack<Room>();
	}

	/**
 	* Accesseur du pseudo du joueur.
 	*
 	* @return le pseudo du joueur.
 	*/
	public String getPseudo() {
    		return this.aPseudo;
	}

	/**
 	* Nouveau pseudo du joueur.
 	*
 	* @param pPseudo : de type String, correspond au nouveau nom que l'on veut donner au joueur.
 	*/
	public void setPseudo(String pPseudo) {
    		this.aPseudo = pPseudo;
	}

	/**
 	* Accesseur du poids de tous les objets que porte le joueur.
 	*
 	* @return le poids que porte le joueur.
 	*/
	public double getCurrentWeight() {
    		return this.aCurrentWeight;
	}

	/**
 	* On définit ici le nouveau poids que porte le joueur.
 	*
 	* @param pWeight : de type int, correspond au poids à ajouter ou enlever au joueur.
 	*/
	public void setPoids(int pWeight) {
			//commentaire 4
    		this.aCurrentWeight += pWeight;
	}// com5

	/**
 	* Accesseur de la pièce courante.
 	*
 	* @return la pièce actuelle où se situe le joueur.
 	*/
	public Room getCurrentRoom() {
    		return this.aCurrentRoom;
	}

	/**
 	* Modificateur de la pièce courante.
 	*
 	* @param pCurrentRoom : de type Room, correspond à la pièce dans laquelle on veut que le joueur soit.
 	*/
	public void setCurrentRoom(Room pCurrentRoom) {
    		this.aCurrentRoom = pCurrentRoom;
	}

	/**
 	* Permet le changement de lieu.
 	*
 	* @param pNextRoom : de type Room, correspond à la pièce dans laquelle le joueur veut aller.
 	*/
	public void walk(Room pNextRoom) {
    	this.aPreviousRooms.push(this.aCurrentRoom);
    	this.aCurrentRoom = pNextRoom;
	}

	/**
 	* Permet de savoir si la l'historique des pièces visitées est vide.
 	*
 	* @return un boolean true si la pile aPreviousRooms est vide, et false si elle ne l'est pas.
 	*/
	public boolean isEmpty() {
    		return this.aPreviousRooms.isEmpty();
	}

	/**
 	* Récupère la dernière pièce visitée et l'enlève de la pile.
 	*
 	* @return la dernière Room visitée.
 	*/
	public Room getPreviousRooms() {
    		return this.aCurrentRoom = this.aPreviousRooms.pop();
	}
}


private void printLocationInfo()
{
        System.out.println("Nous sommes dans " + aCurrentRoom.getDescription());

        if (this.aCurrentRoom.aNorthExit == null && this.aCurrentRoom.aSouthExit == null &&
                this.aCurrentRoom.aWestExit == null && this.aCurrentRoom.aEastExit == null) {
                System.out.println("Il n'y a pas de sortie...");
        }
        else {
            System.out.print("Sorties disponibles : ");
            if (this.aCurrentRoom.aNorthExit != null) {
                System.out.print("nord ");
            }
            if (this.aCurrentRoom.aSouthExit != null) {
                System.out.print("sud ");
            }
            if (this.aCurrentRoom.aWestExit != null) {
                System.out.print("ouest ");
            }
            if (this.aCurrentRoom.aEastExit != null) {
                System.out.print("est ");
            }
        }
} // printLocationInfo()